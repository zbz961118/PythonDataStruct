class Stack :
    """用单向链表模拟栈"""
    class Node :
        """
        elem : 栈元素的元素域
        next : 栈元素的指针
        """
        def __init__(self,elem,next_ = None,):
            self.elem = elem
            self.next = next_
    def __init__(self,__head = None,__tail = None):
        """
        :param __head: 栈的栈顶指针/链表的头指针
        :param __tail: 栈的栈尾指针/链表的尾指针
        """
        self.__head = __head
        self.__tail = __tail
        self.__size = 10
        self.__count = 0
    def __is_empty(self):
        """判断栈是否为空"""
        return self.__count == 0
    def __is_fill(self):
        """判断栈是否为满"""
        return self.__count == self.__size
    def __edit(self,elem):
        """辅助方法，用于栈空时添加栈元素"""
        node = self.Node(elem)
        self.__head = node
        self.__tail = node
        self.__count += 1
    def push(self,elem):
        """元素入栈"""
        if not self.__is_fill() :
            node = self.Node(elem)
            if self.__is_empty() :
                return self.__edit(elem)
            node.next = self.__head
            self.__head = node
            self.__count += 1
    def pop(self):
        """元素出栈"""
        if not self.__is_empty() :
            res = self.__head.elem
            self.__head = self.__head.next
            return res
    def top(self):
        """抛出栈顶元素，但不删除"""
        return self.__head.elem

